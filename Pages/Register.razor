@page "/register"
@layout RegisterLayout
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations

@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS

<section class="w-full max-w-md p-4 shadow-md rounded flex flex-col items-center bg-gray-100/50 dark:bg-gray-700/50 space-y-6">
    <h1 class="text-xl font-semibold text-center">Create an Account</h1>
    <p class="text-sm text-center text-gray-600">Sign up with your details below</p>

    <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="space-y-4 w-full">
            <InputText @bind-Value="registerModel.Username" class="input w-full" placeholder="Username" />
            <InputText @bind-Value="registerModel.Email" class="input w-full" placeholder="Email" />
            <InputText @bind-Value="registerModel.Password" type="password" class="input w-full" placeholder="Password" />
        </div>

        <button type="submit" class="mt-4 w-full bg-indigo-600 hover:bg-indigo-700 py-2 px-4 rounded text-white">
            Register
        </button>
    </EditForm>

    <p class="text-sm text-center ">
        Already have an account? <a href="/" class="text-indigo-600 hover:underline dark:text-indigo-300">Log in</a>
    </p>
</section>

@code {
    private RegisterModel registerModel = new();

    private async Task HandleRegister()
    {
        try
        {
            var response = await Http.PostAsJsonAsync(
                "https://taskmanager-func-xyz-evghhpandvc6fvek.ukwest-01.azurewebsites.net/api/registeruser",
                registerModel
            );

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "üéâ Registration successful! Please log in to continue.");
                Nav.NavigateTo("/");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"‚ùå Registration failed:\n{error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"‚ö†Ô∏è Something went wrong:\n{ex.Message}");
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}
