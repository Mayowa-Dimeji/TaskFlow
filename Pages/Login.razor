@page "/"
@layout LoginLayout
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS

<section class="w-full max-w-md p-4 shadow-md rounded flex flex-col items-center space-y-6">
    <h1 class="text-lg font-semibold mb-2 text-center">Welcome Back</h1>
    <p class="mb-4 text-sm text-center text-gray-600">Please log in to continue.</p>

    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="space-y-4">
            <InputText @bind-Value="loginModel.Email" class="input" placeholder="Email" />
            <InputText @bind-Value="loginModel.Password" type="password" class="input" placeholder="Password" />
        </div>

        <button type="submit" class="mt-4 w-full bg-indigo-600  py-2 px-4 rounded hover:bg-indigo-700">
            Log In
        </button>
    </EditForm>

    <p class="mt-4 text-sm text-center text-gray-600">
        Don't have an account? <a href="/register" class="text-indigo-600 hover:underline">Sign up</a>
    </p>
</section>

@code {
    private LoginModel loginModel = new();

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync(
                "https://taskmanager-func-xyz-evghhpandvc6fvek.ukwest-01.azurewebsites.net/api/loginuser",
                loginModel
            );

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadFromJsonAsync<TokenResponse>();
                var token = json?.Token;

                if (!string.IsNullOrEmpty(token))
                {
                    await JS.InvokeVoidAsync("alert", "✅ Login successful!");
                    Nav.NavigateTo("/dashboard");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "⚠️ Login succeeded but token was missing.");
                }
            }
            else
            {
                var err = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"❌ Login failed:\n{err}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"⚠️ Something went wrong:\n{ex.Message}");
        }
    }

    private class TokenResponse
    {
        public string Token { get; set; } = string.Empty;
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}
