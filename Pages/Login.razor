@page "/"
@layout LoginLayout
@using System.ComponentModel.DataAnnotations
@using TaskFlow.Services
@using TaskFlow.Components
@inject HttpClient Http
@inject ITokenService TokenService

@inject NavigationManager Nav
@inject TaskCacheService TaskCacheService

@inject IJSRuntime JS

<section class="w-full max-w-md bg-white/50 dark:bg-gray-600/50 p-4 shadow-md rounded flex flex-col items-center space-y-6">
    <h1 class="text-lg font-semibold mb-2 text-center">Welcome Back</h1>
    <p class="mb-4 text-sm text-center text-gray-600">Please log in to continue.</p>

    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="space-y-4">
            <InputText @bind-Value="loginModel.Email" class="input" placeholder="Email" />
            <InputText @bind-Value="loginModel.Password" type="password" class="input" placeholder="Password" />
        </div>

        <button type="submit" class="mt-4 w-full bg-indigo-600 text-white py-2 px-4 rounded hover:bg-indigo-700">
            Log In
        </button>
    </EditForm>

    <p class="mt-4 text-sm text-center ">
        Don't have an account? <a href="/register" class="text-indigo-600 hover:underline">Sign up</a>
    </p>

    @if (showNotification)
    {
        <AppNotification Message="@notificationMessage" Type="@notificationType" OnHide="() => showNotification = false" />
    }
</section>

@code {
    private LoginModel loginModel = new();
    private bool showNotification = false;
    private string notificationMessage = string.Empty;
    private string notificationType = "success";
    protected override void OnInitialized()
    {
        showNotification = false;
        // Check if user is already logged in
       
    }

 private async Task HandleLogin()
{
    showNotification=true;
    try
    {
        var response = await Http.PostAsJsonAsync(
            "https://taskmanager-func-xyz-evghhpandvc6fvek.ukwest-01.azurewebsites.net/api/loginuser",
            loginModel
        );

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadFromJsonAsync<TokenResponse>();
            var token = json?.Token;
                            notificationMessage = "✅ Login successful!";
                notificationType = "success";
                showNotification = true;

            if (!string.IsNullOrEmpty(token))
            {
                TokenService.SaveToken(token);
 // ✅ AFTER setting message

                await TaskCacheService.LoadTasksAsync();
                await Task.Delay(1500);
                Nav.NavigateTo("/dashboard", forceLoad: true);
            }
            else
            {
                notificationMessage = "❌ Login failed.";
                notificationType = "error";
                showNotification = true;
            }
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            notificationMessage = $"❌ Login failed:\n{error}";
            notificationType = "error";
            showNotification = true;
        }
    }
    catch (Exception ex)
    {
        notificationMessage = $"⚠️ Something went wrong:\n{ex.Message}";
        notificationType = "error";
        showNotification = true;
    }
}

    private class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

    private class TokenResponse
    {
        public string Token { get; set; } = string.Empty;
    }
}
