@using System.ComponentModel.DataAnnotations
@using TaskFlow.Models
@using TaskFlow.Services
@using TaskFlow.Components
@inject ITokenService TokenService
@inject TaskCacheService TaskCacheService



@inject HttpClient Http
@inject NavigationManager Nav

<div class="@OverlayClass" @onclick="CloseOnOutsideClick">
    <div class="bg-gray-50 dark:bg-gray-800 p-6 rounded-xl shadow-xl w-[90%] md:w-[80%] h-[90%] md:h-[80%] max-w-3xl m-auto relative z-50 overflow-y-auto  " @onclick:stopPropagation>
        <h2 class="text-xl font-bold mb-4 text-center">@((IsEdit ? "Edit Task" : "Add New Task"))</h2>

        <EditForm Model="@TaskModel" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="grid grid-cols-1 gap-4">
                <InputText @bind-Value="TaskModel.Title" class="input w-full" placeholder="Title" />
                <InputTextArea @bind-Value="TaskModel.Description" class="input w-full" placeholder="Description" />
                <section class="flex gap-2 items-center justify-between p-2 flex-wrap">
                <label for="due-date" class="flex shrink-0">Due Date</label>
                <InputDate @bind-Value="TaskModel.DueDate" class="input w-full" placeholder="Due Date" id="due-date" />                    
                </section>
         
                <div class="flex items-center justify-between gap-2 p-2 flex-wrap">
                    <label class="text-sm font-medium text-gray-700 dark:text-gray-200 mb-1">Priority</label>
                    <div class="flex gap-3">
                    @foreach (var level in Priorities)
                    {
                <button type="button"
                    class="@GetPriorityButtonClass(level)"
                    @onclick="() => TaskModel.PriorityLevel = level">
                @level.ToUpper()
                </button>
        }
    </div>
</div>
<div class="flex items-center gap-2 p-2 flex-wrap justify-between">
    <label class="text-sm font-medium text-gray-700 dark:text-gray-200 mb-1">Tag</label>
    <div class="flex gap-3">
        @foreach (var tag in Tags)
        {
            <button type="button"
                    class="@GetTagButtonClass(tag)"
                    @onclick="() => TaskModel.Tag = tag">
                @tag.ToUpper()
            </button>
        }
    </div>
</div>


                <div class="flex items-center gap-2">
                    <InputCheckbox @bind-Value="TaskModel.IsCompleted" />
                    <label>Mark as Completed</label>
                </div>
            </div>

            <div class="mt-6 flex justify-between">
                <button type="button" class="bg-gray-500  text-white px-4 py-2 rounded" @onclick="Close">Cancel</button>
                <button type="submit" class="bg-indigo-600 dark:bg-indigo-700 text-white px-4 py-2 rounded hover:bg-indigo-700">
                    @(IsEdit ? "Update Task" : "Create Task")
                </button>
            </div>
        </EditForm>
    </div>
            @if (showNotification)
    {
        <AppNotification Message="@notificationMessage" Type="@notificationType" OnHide="() => showNotification = false" />
    }
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsEdit { get; set; } = false;
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public EventCallback OnSubmitSuccess { get; set; }
    [Parameter] public TaskModel TaskModel { get; set; } = new();
    private readonly string[] Priorities = { "low", "medium", "high" };
    private readonly string[] Tags = { "personal", "work" };

    private string OverlayClass => IsVisible ? "fixed inset-0 bg-black bg-opacity-50 z-40 flex items-center justify-center" : "hidden";

    private void Close() => OnClose.InvokeAsync(false);

    private void CloseOnOutsideClick() => OnClose.InvokeAsync(false);
          private bool showNotification = false;
    private string notificationMessage = string.Empty;
    private string notificationType = "success";
            protected override void OnInitialized()
    {
        showNotification = false;
        // Check if user is already logged in
       
    }

private async Task HandleSubmit()
{
    var endpoint = IsEdit
        ? $"https://taskmanager-func-xyz-evghhpandvc6fvek.ukwest-01.azurewebsites.net/api/tasks/{TaskModel.Id}"
        : "https://taskmanager-func-xyz-evghhpandvc6fvek.ukwest-01.azurewebsites.net/api/createtask";

    var token = await TokenService.GetToken();
    if (string.IsNullOrWhiteSpace(token)) return;

    var request = new HttpRequestMessage(HttpMethod.Post, endpoint)
    {
        Content = JsonContent.Create(TaskModel)
    };

    request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

    var response = await Http.SendAsync(request);

    if (response.IsSuccessStatusCode)
    {
        notificationMessage = IsEdit ? "✅ Task updated successfully!" : "✅ Task created successfully!";
        notificationType = "success";
        showNotification = true;

        if (IsEdit)
            TaskCacheService.UpdateTask(TaskModel);
        else
            TaskCacheService.AddTask(TaskModel);

        // ✅ Delay before closing to allow UI to show message
        await Task.Delay(1000);

        Close(); 
        await OnSubmitSuccess.InvokeAsync();
    }
    else
    {
        var error = await response.Content.ReadAsStringAsync();
        notificationMessage = IsEdit ? "❌ Failed to update task." : "❌ Failed to create task.";
        notificationType = "error";
        showNotification = true;

        Console.WriteLine($"❌ Error: {error}");
    }
}




private string GetTagButtonClass(string tag)
{
    var isActive = TaskModel.Tag == tag;

    var baseClass = tag switch
    {
        "personal" => "text-xs font-semibold px-3 py-1 rounded-full border transition text-purple-800 shadow-xs dark:text-purple-400",
        "work" => "text-xs font-semibold px-3 py-1 rounded-full border transition text-blue-800 shadow-xs dark:text-blue-400",
        _ => "text-xs font-semibold px-3 py-1 rounded-full border transition text-gray-800 shadow-xs dark:text-gray-400"
    };

    var activeStyle = tag switch
    {
        "personal" => "bg-purple-100 text-purple-800 border-purple-400 dark:bg-purple-200 dark:text-purple-800 dark:border-purple-400",
        "work" => "bg-blue-100 text-blue-800 border-blue-400 dark:bg-blue-200 dark:text-blue-800 dark:border-blue-400",
        _ => "bg-gray-100 text-gray-800 border-gray-400"
    };

    var inactive = "opacity-50 hover:opacity-100";

    return $"{baseClass} {(isActive ? activeStyle : inactive)}";
}


private string GetPriorityButtonClass(string level)
{
    var isActive = TaskModel.PriorityLevel == level;
    
    var baseClass = level switch
    {
        "low" => "text-xs font-semibold px-3 py-1 rounded-full border shadow-xs text-green-800 dark:text-green-400",
        "medium" => "text-xs font-semibold px-3 py-1 rounded-full border shadow-xs text-yellow-800 dark:text-yellow-400",
        "high" => "text-xs font-semibold px-3 py-1 rounded-full border shadow-xs text-red-800 dark:text-red-400",
        _ => "text-xs font-semibold px-3 py-1 rounded-full border shadow-xs text-gray-800 dark:text-gray-400"
    };

    var activeStyle = level switch
    {
        "low" => "bg-green-100 text-green-800 border-green-400 dark:bg-green-200 dark:text-green-800 dark:border-green-400",
        "medium" => "bg-yellow-100 text-yellow-800 border-yellow-400 dark:bg-yellow-200 dark:text-yellow-800 dark:border-yellow-400",
        "high" => "bg-red-100 text-red-800 border-red-400 dark:bg-red-200 dark:text-red-800 dark:border-red-400",
        _ => "bg-gray-100 text-gray-800 border-gray-400 dark:bg-gray-200 dark:text-gray-800 dark:border-gray-400"
    };

    var inactive = "opacity-50 hover:opacity-100 transition";

    return $"{baseClass} {(isActive ? activeStyle : inactive)}";
}


}
