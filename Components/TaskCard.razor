@using System.Globalization
@using TaskFlow.Models
@using TaskFlow.Services
@using TaskFlow.Components
@inject TaskService TaskService
@inject TaskCacheService CacheService
@inject HttpClient Http
@inject ITokenService TokenService

<div class="flex items-start justify-between p-4 border rounded-xl shadow-sm bg-white/50 dark:bg-gray-600/85 transition-all group">
    <div class="flex items-start gap-3 w-full">
        <!-- Circle Checkbox -->
        <button class="w-5 h-5 mt-1 border-2 rounded-full flex items-center justify-center transition-colors"
                @onclick="ToggleComplete"
                style="border-color: @(Task.IsCompleted ? "green" : "#ccc"); background-color: @(Task.IsCompleted ? "green" : "transparent")">
            @if (Task.IsCompleted)
            {
                <svg xmlns="http://www.w3.org/2000/svg" class="w-3 h-3 " viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414L8.414 15 5 11.586a1 1 0 00-1.414 1.414l4.121 4.121a1 1 0 001.414 0l9-9a1 1 0 000-1.414z" clip-rule="evenodd" />
                </svg>
            }
        </button>

        <!-- Task Details -->
        <div class="flex flex-col w-full">
            <p class="font-medium text-sm md:text-base @(Task.IsCompleted ? "line-through text-gray-500 dark:text-gray-400" : "")">
                @Task.Title
            </p>
            <p class="text-xs text-gray-500 mt-1">
                @* @if (Task.IsCompleted)
                { *@
                    @* <span>Completed: @Task.DueDate.ToLocalTime().ToString("f", CultureInfo.CurrentCulture)</span> *@
                @* }
                else
                { *@
                    <span>Due: @Task.DueDate.ToLocalTime().ToString("f", CultureInfo.CurrentCulture)</span>
                @* } *@
            </p>

            <!-- Badges -->
            <div class="flex gap-2 mt-2 text-xs ">
                @if (!string.IsNullOrEmpty(Task.PriorityLevel))
                {
                    <span class="@GetPriorityClass(Task.PriorityLevel)">@Capitalize(Task.PriorityLevel) Priority</span>
                }
                @if (!string.IsNullOrEmpty(Task.Tag))
                {
                    <span class="@GetTagClass(Task.Tag)">@Capitalize(Task.Tag)</span>
                }
            </div>
        </div>
    </div>

    <!-- Actions display for large screens -->
    <div class="hidden md:flex items-center gap-2 ml-2">
        <button title="Edit" @onclick="HandleEdit" class="text-gray-400  hover:text-indigo-600">
            <svg xmlns="http://www.w3.org/2000/svg" class="size-6" viewBox="0 0 24 24" fill="currentColor">
                <path d="M5 20h14v-2H5v2zm14.71-13.29l-2.42-2.42a1.003 1.003 0 00-1.42 0L9 11.59V15h3.41l6.29-6.29c.39-.39.39-1.03 0-1.42z"/>
            </svg>
        </button>
        <button title="Delete" @onclick="HandleDelete" class="text-gray-400  hover:text-red-600">
            <svg xmlns="http://www.w3.org/2000/svg" class="size-6 " viewBox="0 0 24 24" fill="currentColor">
                <path d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-4.5l-1-1z"/>
            </svg>
        </button>
    </div>
    @* action display for small screens *@
<div class="flex items-center gap-2 ml-2 md:hidden relative">
    <!-- Toggle Button -->
    <button @onclick="ToggleMenu" title="Actions" class="text-gray-400 size-6">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
            <path fill="currentColor" d="M10.001 7.8a2.2 2.2 0 1 0 0 4.402A2.2 2.2 0 0 0 10 7.8zm0-2.6A2.2 2.2 0 1 0 9.999.8a2.2 2.2 0 0 0 .002 4.4zm0 9.6a2.2 2.2 0 1 0 0 4.402a2.2 2.2 0 0 0 0-4.402z"/>
        </svg>
    </button>

    <!-- Dropdown Menu -->
    @if (showMenu)
    {
        <div @onclick="CloseDropdownIfOpen" class="fixed inset-0 z-40"></div>
        <ul class="absolute right-0 top-8 w-32 bg-white/50 dark:bg-gray-600/50 rounded-md shadow-md text-sm z-50 border dark:border-gray-600 justify-items-start items-center" @onclick:stopPropagation>
        
            <li>
                <button @onclick="HandleEdit" class="w-full text-left px-4 py-2 hover:bg-indigo-100 dark:hover:bg-indigo-600 dark:text-white">
                     Edit
                </button>
            </li>
            <li>
                <button @onclick="HandleDelete" class="w-full text-left px-4 py-2 text-red-600 hover:bg-red-50 dark:hover:bg-red-600 dark:text-red-400">
                     Delete
                </button>
            </li>
        </ul>
       
    }
</div>
@if (showNotification)
{
    <AppNotification Message="@notificationMessage" Type="@notificationType" OnHide="() => showNotification = false" />
}


</div>

@code {
    [Parameter] public TaskModel Task { get; set; } = new();
    [Parameter] public EventCallback<TaskModel> OnEdit { get; set; } // to open modal from parent
   [Parameter] public EventCallback<string> OnDelete { get; set; } // to notify parent after delete
    private bool showNotification = false;
private string notificationMessage = string.Empty;
private string notificationType = "success";


        private bool showMenu = false;

    private void ToggleMenu()
    {
        showMenu = !showMenu;
    }
        private void CloseDropdownIfOpen()
    {
        if (showMenu)
        {
            showMenu = false;
        }
    }

private async Task HandleEdit()
{
    showMenu = false;
    if (OnEdit.HasDelegate)
    {
        await OnEdit.InvokeAsync(Task);
    }
}

private async Task HandleDelete()
{
    showMenu = false;

    var token = await TokenService.GetToken();
    if (string.IsNullOrWhiteSpace(token)) return;

    Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

    var response = await Http.DeleteAsync($"https://taskmanager-func-xyz-evghhpandvc6fvek.ukwest-01.azurewebsites.net/api/tasks/{Task.Id}");

    if (response.IsSuccessStatusCode)
    {
        notificationMessage = "🗑 Task deleted successfully!";
        notificationType = "success";
        showNotification = true;

        await System.Threading.Tasks.Task.Delay(1000); // Give user visual feedback

        CacheService.RemoveTask(Task.Id); // Update cache

        if (OnDelete.HasDelegate)
            await OnDelete.InvokeAsync(Task.Id);
    }
    else
    {
        notificationMessage = "❌ Failed to delete task.";
        notificationType = "error";
        showNotification = true;
    }
}




 private async Task ToggleComplete()
{
    Task.IsCompleted = !Task.IsCompleted;

    var success = await CacheService.UpdateTaskAsync(Task);
    if (!success)
    {
        Console.WriteLine("❌ Failed to update task status.");
    }
}


    private string Capitalize(string text) => string.IsNullOrWhiteSpace(text) ? "" : char.ToUpper(text[0]) + text[1..];

    private string GetPriorityClass(string priority) => priority.ToLower() switch
    {
        "high" => "bg-red-100 text-red-600 px-2 py-0.5 rounded-xl",
        "medium" => "bg-yellow-100 text-yellow-600 px-2 py-0.5 rounded-xl",
        "low" => "bg-blue-100 text-blue-600 px-2 py-0.5 rounded-xl",
        _ => "bg-gray-200 text-gray-700 px-2 py-0.5 rounded-xl"
    };

    private string GetTagClass(string tag) => tag.ToLower() switch
    {
        "work" => "bg-indigo-100 text-indigo-700 px-2 py-0.5 rounded-xl",
        "personal" => "bg-purple-100 text-purple-700 px-2 py-0.5 rounded-xl",
        _ => "bg-gray-200 text-gray-700 px-2 py-0.5 rounded-xl"
    };
}
